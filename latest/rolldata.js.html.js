tui.util.defineNamespace("fedoc.content", {});
fedoc.content["rolldata.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview A data for move\n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\n * @dependency ne-code-snippet\n */\n\n\n\n/** \n * Data model for rolling\n * @param {Object} option A component options\n * @param {(Array|Object)} data A data of rolling\n * @constructor\n */\nvar Data = tui.util.defineClass(/** @lends Data.prototype */{\n    init: function(option, data) {\n        /**\n         * Whether changable data\n         * @type {Boolean}\n         */\n        this.isVariable = !!option.isVariable;\n        /**\n         * A data list\n         * @type {Array}\n         */\n        this._datalist = null;\n        /**\n         * A data\n         * @type {Node}\n         * @private\n         */\n        this._data = null;\n        /**\n         * A init number\n         * @type {Number}\n         */\n        this._current = option.initNum || 1;\n        /**\n         * Whehter circular\n         * @type {Boolean}\n         * @private\n         */\n        this._isCircular = tui.util.isBoolean(option.isCircular) ? option.isCircular : true;\n        if (this.isVariable) {\n            this.mixin(remoteDataMethods);\n        } else {\n            this.mixin(staticDataMethods);\n        }\n\n        this._initData(data);\n    },\n    /**\n     * Mixin\n     * @param {Object} methods A method set [staticDataMethods|remoteDataMethods]\n     */\n    mixin: function(methods) {\n        tui.util.extend(this, methods);\n    }\n});\n\n/**\n * Static data method set\n * @namespace staticDataMethods\n */\nvar staticDataMethods = {\n    /**\n     * Initialize data\n     * @param {Array} datalist A list that is not connected with each other\n     * @returns {Array} _datalist\n     * @private\n     */\n    _initData: function(datalist) {\n        var before = null,\n            first,\n            nodelist;\n\n        nodelist = tui.util.map(datalist, function(data, index) {\n\n            var node = new Node(data);\n            node.prev = before;\n\n            if (before) {\n                before.next = node;\n            } else {\n                first = node;\n            }\n            if (index === (datalist.length - 1)) {\n                node.next = first;\n                first.prev = node;\n            }\n\n            before = node;\n\n            return node;\n\n        }, this);\n        nodelist.unshift(null);\n        this._datalist = nodelist;\n    },\n\n    /**\n     * Get index data\n     * @param {Number} index A index to get\n     * @returns {String}\n     */\n    getData: function(index) {\n        return this._datalist[index || this._current].data;\n    },\n\n    /**\n     * Get list length\n     * @returns {Array}\n     */\n    getDataListLength: function() {\n        return this._datalist.length - 1;\n    },\n\n    /**\n     * Get next data\n     * @param {Number} index A next index\n     * @returns {String}\n     * @private\n     */\n    getPrevData: function(index) {\n        return this._datalist[index || this._current].prev.data;\n    },\n\n    /**\n     * Get prev data\n     * @param {Number} index A prev index\n     * @returns {String}\n     * @private\n     */\n    getNextData: function(index) {\n        return this._datalist[index || this._current].next.data;\n    },\n\n    /**\n     * Change current\n     * @param {String} flow A direction\n     * @private\n     */\n    changeCurrent: function(flow) {\n        var length = this.getDataListLength();\n        if (flow === 'prev') {\n            this._current -= 1;\n            if (this._current &lt; 1) {\n                this._current = this._isCircular ? length : 1;\n                return true;\n            }\n        } else {\n            this._current += 1;\n            if (this._current > length) {\n                this._current = this._isCircular ? 1 : length;\n                return true;\n            }\n        }\n    },\n    /**\n     * Get current\n     * @returns {number}\n     */\n    getCurrent: function() {\n        return this._current;\n    }\n};\n\n/**\n * Changable data method set\n * @namespace remoteDataMethods\n * @static\n */\nvar remoteDataMethods = {\n    /**\n     * Initialize data\n     * @param {String} data A data to draw\n     * @private\n     */\n    _initData: function(data) {\n        this._data = new Node(data);\n    },\n\n    /**\n     * Get current data or some data by index\n     * @param {Number} index A index of data\n     * @returns {String}\n     */\n    getData: function() {\n        return this._data.data;\n    },\n\n    /**\n     * Set data\n     * @param {String} type ['prev|next'] A data index\n     * @param {String} data A data in rolling component\n     */\n    setData: function(type, data) {\n        this._data[type] = new Node(data);\n    },\n\n    /**\n     * Disconnect data\n     * @param {String} type ['prev|next'] Rewrite data\n     */\n    severLink: function(type) {\n        var data = this._data;\n        this._data = this._data[type];\n        data[type] = null;\n    },\n\n    /**\n     * Get previous Data\n     * @returns {String}\n     * @private\n     */\n    getPrevData: function() {\n        return this._data.prev &amp;&amp; this._data.prev.data;\n    },\n\n    /**\n     * Get next data\n     * @returns {String}\n     * @private\n     */\n    getNextData: function() {\n        return this._data.next &amp;&amp; this._data.next.data;\n    }\n};\n\n/**\n * Node for each data panel\n * @namespace Node\n * @param {Object} data node data or html value\n * @constructor\n */\nvar Node = function(data) {\n\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n\n};\n\nmodule.exports = Data;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"