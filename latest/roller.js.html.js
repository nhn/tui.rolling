tui.util.defineNamespace("fedoc.content", {});
fedoc.content["roller.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Roller \n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\n * @dependency ne-code-snippet\n */\nvar motion = require('./motion');\n/**\n * Roller that move rolling panel\n *\n * @param {Object} option The option of rolling component\n * @constructor\n */\nvar Roller = tui.util.defineClass(/** @lends Roller.prototype */{\n    init: function(option, initData) {\n        /**\n         * A options\n         * @type {Object}\n         */\n        this._option = option;\n        /**\n         * A root element\n         * @type {(HTMLElement|String)}\n         * @private\n         */\n        this._element = tui.util.isString(option.element) ? document.getElementById(option.element) : option.element;\n        /**\n         * A direction of rolling (vertical|horizontal)\n         * @type {String}\n         * @private\n         */\n        this._direction = option.direction || 'horizontal';\n        /**\n         * A style attribute to move('left | top')\n         * @type {string}\n         * @private\n         */\n        this._range = this._direction === 'horizontal' ? 'left' : 'top';\n        /**\n         * A function that is used to move\n         * @type {Function}\n         */\n        this._motion = motion[option.motion || 'noeffect'];\n        /**\n         * A rolling unit\n         * @type {Number}\n         * @private\n         */\n        this._rollunit = option.unit || 'page';\n        /**\n         * Whether html is drawn or not\n         * @type {boolean}\n         * @private\n         */\n        this._isDrawn = !!option.isDrawn;\n        /**\n         * A item per page\n         * @type {boolean}\n         * @private\n         */\n        this._itemcount = option.itemcount;\n        /**\n         * A direction to next rolling\n         * @type {String|string}\n         * @private\n         */\n        this._flow = option.flow || 'next';\n        /**\n         * A animation duration\n         * @type {*|number}\n         * @private\n         */\n        this._duration = option.duration || 1000;\n        /**\n         * Whether circular or not\n         * @type {Boolean}\n         * @private\n         */\n        this._isCircular = tui.util.isExisty(option.isCircular) ? option.isCircular : true;\n        /**\n         * A roller state\n         * @type {String}\n         */\n        this.status = 'idle';\n        /**\n         * A container that will be moved\n         * @type {HTMLElement}\n         * @private\n         */\n        this._container = null;\n        /**\n         * Changable data panel\n         * @type {Object}\n         */\n        this.panel = { prev: null, center: null, next: null };\n        /**\n         * Fixed roller panels, that have node list by array\n         * @type {Array}\n         */\n        this._panels = [];\n        /**\n         * Base element \n         * @type {HTMLElement}\n         */\n        this._basis = null;\n        /**\n         * Root element width, if move unit is page this is move width\n         * @type {number}\n         * @private\n         */\n        this._distance = 0;\n        /**\n         * Moved panel target\n         * @type {Array}\n         * @private\n         */\n        this._targets = [];\n        /**\n         * Queue for order that is requested during moving \n         * @type {Array}\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A move unit count\n         * @type {number}\n         * @private\n         */\n        this._unitCount = option.rollunit === 'page' ? 1 : (option.unitCount || 1);\n        /**\n         * Custom event\n         * @type {Object}\n         * @private\n         */\n        this._events = {};\n\n        if (!this._isDrawn) {\n            this.mixin(movePanelSet);\n        } else {\n            this.mixin(moveContainerSet);\n        }\n        this._setContainer();\n        this._masking();\n        this._setUnitDistance();\n\n        if (this._isDrawn) {\n            this._initPanel();\n        }\n        this._setPanel(initData);\n    },\n\n    /**\n     * Mixin\n     * @param {Object} methods A method set [staticDataMethods|remoteDataMethods]\n     */\n    mixin: function(methods) {\n        tui.util.extend(this, methods);\n    },\n\n    /**\n     * Masking \n     * @method\n     * @private\n     */\n    _masking: function() {\n        var element = this._element,\n            elementStyle = element.style;\n        elementStyle.position = 'relative';\n        elementStyle.overflow = 'hidden';\n        elementStyle.width = elementStyle.width || (element.clientWidth + 'px');\n        elementStyle.height = elementStyle.height || (element.clientHeight + 'px');\n    },\n\n    /**\n     * Get unit move distance\n     * @private\n     */\n    _setUnitDistance: function() {\n\n        var dist,\n            elementStyle = this._element.style;\n\n        if (this._direction === 'horizontal') {\n            dist = elementStyle.width.replace('px', '');\n        } else {\n            dist = elementStyle.height.replace('px', '');\n        }\n\n        if (this._rollunit !== 'page' &amp;&amp; this._isDrawn) {\n            dist = Math.ceil(dist / this._itemcount);\n        }\n        this._distance = parseInt(dist, 10);\n    },\n\n    /**\n     * Queue move order    \n     * @param {String} data A page data\n     * @param {Number} duration A duartion\n     * @param {String} flow A direction to move\n     * @private\n     */\n    _queueing: function(data, duration, flow) {\n        this._queue.push({\n            data: data,\n            duration: duration,\n            flow: flow\n        });\n    },\n\n    /**\n     * A default direction\n     * @param {String} flow A flow that will be defualt value\n     */\n    setFlow: function(flow) {\n        this._flow = flow || this._flow || 'next';\n    },\n\n    /**\n     * change animation effect\n     * @param {String} type A name of effect\n     */\n    changeMotion: function(type) {\n        this._motion = motion[type];\n    },\n\n    /**\n     * Animate\n     * @param {Object} option A options for animating\n     */\n    _animate: function(option) {\n        var start = new Date(),\n            id = window.setInterval(function() {\n                var timePassed = new Date() - start,\n                    progress = timePassed / option.duration,\n                    delta;\n                if (progress > 1) {\n                    progress = 1;\n                }\n                delta = option.delta(progress);\n\n                option.step(delta);\n\n                if (progress === 1) {\n                    window.clearInterval(id);\n                    option.complete();\n                }\n            }, option.delay || 10);\n    }\n});\n\n/**\n * A roller method set for fixed panel\n * @namespace movePanelSet\n * @static\n */\nvar movePanelSet = {\n    /**\n     * Set rolling container\n     * @private\n     */\n    _setContainer: function() {\n        var option = this._option,\n            element = this._element,\n            firstChild = element.firstChild,\n            wrap,\n            next,\n            tag,\n            className;\n\n        if (option.wrapperTag) {\n            tag = option.wrapperTag &amp;&amp; option.wrapperTag.split('.')[0];\n            className = option.wrapperTag &amp;&amp; option.wrapperTag.split('.')[1] || '';\n            wrap = document.createElement(tag);\n            if (className) {\n            wrap.className = className;\n            }\n            this._element.innerHTML = '';\n            this._element.appendChild(wrap);\n        } else {\n            if (tui.util.isHTMLTag(firstChild)) {\n                wrap = firstChild;\n            }\n            next = firstChild &amp;&amp; firstChild.nextSibling;\n            if (tui.util.isHTMLTag(next)) {\n                wrap = next;\n            } else {\n                wrap = document.createElement('ul');\n                this._element.appendChild(wrap);\n            }\n        }\n        this._container = wrap;\n    },\n    /**\n     * Make rolling panel\n     * @private\n     */\n    _setPanel: function(initData) {\n        var panel = this._container.firstChild,\n            panelSet = this.panel,\n            option = this._option,\n            tag,\n            className,\n            key;\n\n        if (tui.util.isString(option.panelTag)) {\n            tag = (option.panelTag).split('.')[0];\n            className = (option.panelTag).split('.')[1] || '';\n        } else {\n            if (!tui.util.isHTMLTag(panel)) {\n                panel = panel &amp;&amp; panel.nextSibling;\n            }\n            tag = tui.util.isHTMLTag(panel) ? panel.tagName : 'li';\n            className = (panel &amp;&amp; panel.className) || '';\n        }\n\n        this._container.innerHTML = '';\n\n        for (key in panelSet) {\n            panelSet[key] = this._makeElement(tag, className, key);\n        }\n\n        panelSet.center.innerHTML = initData;\n        this._container.appendChild(panelSet.center);\n\n    },\n    /**\n     * Make HTML Element     \n     * @param {String} tag A tag name\n     * @param {String} className A class name\n     * @param {String} key A class key name\n     * @returns {HTMLElement}\n     * @private\n     */\n    _makeElement: function(tag, className, key) {\n        var element = document.createElement(tag);\n        element.className = className;\n        element.style.position = 'absolute';\n        element.style.width = '100%';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.top = '0px';\n        return element;\n    },\n\n    /**\n     * Set panel data\n     * @param {String} data A data for replace panel\n     * @private\n     */\n    _updatePanel: function(data) {\n        this.panel[this._flow || 'center'].innerHTML = data;\n    },\n\n    /**\n     * Append move panel\n     * @private\n     */\n    _appendMoveData: function() {\n        var flow = this._flow,\n            movePanel = this.panel[flow],\n            style = movePanel.style,\n            dest = (flow === 'prev' ? -this._distance : this._distance) + 'px';\n\n        style[this._range] = dest;\n\n        this.movePanel = movePanel;\n        this._container.appendChild(movePanel);\n    },\n\n    /**\n     * Get each panels' move distances\n     * @returns {*}\n     * @private\n     */\n    _getMoveSet: function() {\n        var flow = this._flow;\n        if (flow === 'prev') {\n            return [0, this._distance];\n        } else {\n            return [-this._distance, 0];\n        }\n    },\n\n    /**\n     * Get start points\n     * @returns {Array}\n     * @private\n     */\n    _getStartSet: function() {\n        var panel = this.panel,\n            flow = this._flow,\n            range = this._range,\n            isPrev = flow === 'prev',\n            first = isPrev ? panel['prev'] : panel['center'],\n            second = isPrev ? panel['center'] : panel['next'];\n        return [parseInt(first.style[range], 10), parseInt(second.style[range], 10)];\n    },\n\n    /**\n     * Get move target\n     * @param {String} flow A flow to move\n     * @private\n     */\n    _setTarget: function(flow) {\n        this._targets = [this.panel['center']];\n        if (flow === 'prev') {\n            this._targets.unshift(this.panel[flow]);\n        } else {\n            this._targets.push(this.panel[flow]);\n        }\n\n    },\n    /**\n     * A panel move\n     * @param {Object} data A data to update panel\n     */\n    move: function(data, duration, flow) {\n        flow = flow || this._flow;\n        if (this.status === 'idle') {\n            this.status = 'run';\n        } else {\n            this._queueing(data, duration, flow);\n            return;\n        }\n\n        /**\n         * Before move custom event fire\n         * @fires beforeMove\n         * @param {String} data Inner HTML\n         * @example\n         * tui.component.RollingInstance.attach('beforeMove', function(data) {\n         *    // ..... run code\n         * });\n         */\n        var res = this.invoke('beforeMove', {data: data});\n\n        if (!res) {\n            this.status = 'idle';\n            return;\n        }\n\n        // Set next panel\n        this._updatePanel(data);\n        this._appendMoveData();\n        this._setTarget(flow);\n\n        if (!this._motion) {\n            this._moveWithoutMotion();\n        } else {\n            this._moveWithMotion(duration);\n        }\n    },\n\n    /**\n     * Set position\n     * @private\n     */\n    _moveWithoutMotion: function() {\n        var flow = this._flow,\n            pos = this._getMoveSet(flow),\n            range = this._range;\n        tui.util.forEach(this._targets, function(element, index) {\n            element.style[range] = pos[index] + 'px';\n        });\n        this.complete();\n    },\n\n    /**\n     * Run animation\n     * @private\n     */\n    _moveWithMotion: function(duration) {\n        var flow = this._flow,\n            start = this._getStartSet(flow),\n            distance = this._distance,\n            range = this._range;\n\n        duration = duration || this._duration;\n\n        this._animate({\n            delay: 10,\n            duration: duration || 1000,\n            delta: this._motion,\n            step: tui.util.bind(function(delta) {\n                tui.util.forEach(this._targets, function(element, index) {\n                    var dest = (flow === 'prev') ? distance * delta : -(distance * delta);\n                    element.style[range] = start[index] + dest + 'px';\n\n                });\n            }, this),\n            complete: tui.util.bind(this.complete, this)\n        });\n    },\n\n    /**\n     * Complate callback\n     */\n    complete: function() {\n        var panel = this.panel,\n            tempPanel,\n            flow = this._flow;\n\n        tempPanel = panel['center'];\n        panel['center'] = panel[flow];\n        panel[flow] = tempPanel;\n\n        this._targets = null;\n        this._container.removeChild(tempPanel);\n        this.status = 'idle';\n\n        if (tui.util.isNotEmpty(this._queue)) {\n            var first = this._queue.shift();\n            this.move(first.data, first.duration, first.flow);\n        } else {\n            /**\n             * After custom event run\n             * @fires afterMove\n             * @example\n             * tui.component.RollingInstance.attach('afterMove', function() {\n             *    // ..... run code\n             * });\n             */\n            this.fire('afterMove');\n        }\n    }\n};\n\n/**\n * Container move methods\n * @namespace moveContainerSet\n * @static\n */\nvar moveContainerSet = {\n    /**\n     * Set container\n     * @private\n     */\n    _setContainer: function() {\n        var element = this._element,\n            firstChild = element.firstChild,\n            wrap;\n        if (this._isDrawn) {\n            wrap = tui.util.isHTMLTag(firstChild) ? firstChild : firstChild.nextSibling;\n            this._container = wrap;\n            this._container.style[this._range] = 0;\n        }\n        this._setItemCount();\n    },\n\n    /**\n     * Move area check\n     * @param {String} flow A direction to move\n     * @returns {Boolean}\n     * @private\n     */\n    _isLimitPoint: function(flow) {\n        var moved = this._getCurrentPosition();\n        if (flow === 'next') {\n            if (this.limit > -moved) {\n                return false;\n            } else {\n                return true;\n            }\n        } else {\n            if(moved &lt; 0) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n    },\n\n    /**\n     * Get current position\n     * @private\n     */\n    _getCurrentPosition: function() {\n        return parseInt(this._container.style[this._range], 10);\n    },\n\n    /**\n     * Move panels\n     * @param {Object} data A data to update panel\n     */\n    move: function(duration, flow) {\n        flow = flow || this._flow;\n\n        if (this.status === 'idle') {\n            this.status = 'run';\n        } else {\n            this._queueing(duration, flow);\n            return;\n        }\n\n        /**\n         * Fire before custom event\n         * @fires beforeMove\n         * @param {String} data inner HTML\n         * @example\n         * tui.component.RollingInstance.attach('beforeMove', function(data) {\n         *    // ..... run code\n         * });\n         */\n        var res = this.invoke('beforeMove');\n        if (!res) {\n            this.status = 'idle';\n            return;\n        }\n\n        if(!this._isCircular &amp;&amp; this._isLimitPoint(flow)) {\n            this.status = 'idle';\n            return;\n        }\n\n        if (this._isCircular) {\n            this._rotatePanel(flow);\n        }\n\n        if (!this._motion) {\n            this._moveWithoutMotion();\n        } else {\n            this._moveWithMotion(duration);\n        }\n    },\n    /**\n     * Fix panels\n     */\n    complete: function() {\n        if (this._isCircular) {\n            this._setPanel();\n        }\n        this.status = 'idle';\n    },\n\n    /**\n     * Get move distance\n     * @param {String} flow A direction\n     * @returns {number}\n     * @private\n     */\n    _getMoveDistance: function(flow) {\n        var moved = this._getCurrentPosition(),\n            castDist = this._distance * this._unitCount;\n        if (flow === 'prev') {\n            if (this._isCircular) {\n                return this._distance;\n            }\n            return (moved + castDist) > 0 ? -moved : castDist;\n        } else {\n            if (this._isCircular) {\n                return -this._distance;\n            }\n            return castDist > (this.limit + moved)? (-this.limit - moved) : -castDist;\n        }\n    },\n\n    /**\n     * Set postion\n     * @private\n     */\n    _moveWithoutMotion: function() {\n        var flow = this._flow,\n            pos = this._getMoveDistance(flow),\n            range = this._range,\n            start = parseInt(this._container.style[range], 10);\n        this._container.style[range] = start + pos + 'px';\n        this.complete();\n    },\n\n    /**\n     * Run animation\n     * @private\n     */\n    _moveWithMotion: function(duration) {\n        var flow = this._flow,\n            container = this._container,\n            range = this._range,\n            start = parseInt(container.style[range], 10),\n            distance = this._getMoveDistance(flow);\n        duration = duration || this._duration;\n\n        this._animate({\n            delay: 10,\n            duration: duration || 1000,\n            delta: this._motion,\n            step: tui.util.bind(function(delta) {\n                var dest = distance * delta;\n                container.style[range] = start + dest + 'px';\n            }, this),\n            complete: tui.util.bind(this.complete, this)\n        });\n    },\n\n    /**\n     * Rotate panel\n     * @param {String} flow A flow to rotate panel\n     * @private\n     */\n    _rotatePanel: function(flow) {\n\n        flow = flow || this._flow;\n\n        var standard,\n            moveset,\n            movesetLength,\n            range = this._range,\n            containerMoveDist,\n            isPrev = flow === 'prev',\n            basis = this._basis;\n\n        this._setPartOfPanels(flow);\n\n        moveset = this._movePanelSet;\n        movesetLength = moveset.length;\n        containerMoveDist = this._getMoveDistance(flow);\n\n        if (this._isInclude(this._panels[this._basis], moveset)) {\n            this._basis = isPrev ? basis - movesetLength : basis + movesetLength;\n            return;\n        }\n        if (isPrev) {\n            standard = this._panels[0];\n            tui.util.forEach(moveset, function(element) {\n                this._container.insertBefore(element, standard);\n            }, this);\n        } else {\n            tui.util.forEach(moveset, function(element) {\n                this._container.appendChild(element);\n            }, this);\n        }\n        this._container.style[range] = parseInt(this._container.style[range], 10) - containerMoveDist + 'px';\n    },\n\n    /**\n     * Check current panel is included rotate panels\n     * @param {HTMLElement} item A target element\n     * @param {Array} colleciton A array to compare\n     * @returns {boolean}\n     * @private\n     */\n    _isInclude: function(item, colleciton) {\n        var i,\n            len;\n        for(i = 0, len = colleciton.length; i &lt; len; i++) {\n            if (colleciton[i] === item) {\n                return true;\n            }\n        }\n    },\n\n    /**\n     * Find rotate panel by direction\n     * @param {String} flow A direction\n     * @private\n     */\n    _setPartOfPanels: function(flow) {\n        var itemcount = this._itemcount,\n            isPrev = (flow === 'prev'),\n            count = (this._rollunit !== 'page') ? 1 : itemcount,\n            dist = isPrev ? -count : count,\n            point = isPrev ? [dist] : [0, dist];\n\n        this._movePanelSet = this._panels.slice.apply(this._panels, point);\n    },\n\n    /**\n     * Get display item count\n     * @private\n     */\n    _setItemCount: function() {\n        var element = this._element,\n            elementStyle = element.style,\n            elementWidth = parseInt(elementStyle.width || element.clientWidth, 10),\n            elementHeight = parseInt(elementStyle.height || element.clientHeight, 10),\n            item = this._element.getElementsByTagName('li')[0], // 마크업은 li로 픽스\n            itemStyle = item.style,\n            itemWidth = parseInt(itemStyle.width || item.clientWidth, 10),\n            itemHeight = parseInt(itemStyle.height || item.clientHeight, 10);\n\n        if (this._range === 'left') {\n            this._itemcount = Math.round(elementWidth / itemWidth);\n        } else {\n            this._itemcount = Math.round(elementHeight / itemHeight);\n        }\n    },\n\n    /**\n     * Initalize panels \n     * @private\n     */\n    _initPanel: function() {\n        var container = this._container,\n            panels = container.childNodes,\n            i,\n            arr;\n\n        panels = tui.util.toArray(panels);\n\n        this._panels = tui.util.filter(panels, function(element) {\n            return tui.util.isHTMLTag(element);\n        });\n        tui.util.forEach(this._panels, function(panel, index) {\n            panel.className += ' __index' + index + '__';\n        });\n    },\n\n    /**\n     * Set panel list\n     * @private\n     */\n    _setPanel: function() {\n        var container = this._container,\n            panels = container.childNodes,\n            i,\n            arr;\n\n        panels = tui.util.toArray(panels);\n\n        this._panels = tui.util.filter(panels, function(element) {\n            return tui.util.isHTMLTag(element);\n        });\n        this._basis = this._basis || 0;\n        this._setBoundary();\n    },\n\n    /**\n     * Set fixed area incircular rolling\n     * @param {String} flow A direction\n     * @returns {Boolean}\n     * @private\n     */\n    _setBoundary: function() {\n        var panels = this._panels,\n            distance = this._distance,\n            range = this._range,\n            rangeDistance = parseInt(this._element.style[range === 'left' ? 'width' : 'height'], 10),\n            wrapArea = this._rollunit === 'page' ? (distance / this._itemcount) : distance * panels.length,\n            limitDist = wrapArea - rangeDistance;\n        this.limit = limitDist;\n    },\n\n    /**\n     * Get current index on selected page\n     * @param {Number} page A move panel number\n     * @returns {number}\n     * @private\n     */\n    _checkPagePosition: function(page) {\n        var dist = null,\n            panels = this._panels;\n        tui.util.forEach(panels, function(panel, index) {\n            if (panel.className.indexOf('__index' + page) !== -1) {\n                if (!tui.util.isExisty(dist)) {\n                    dist = index;\n                }\n            }\n        });\n        return dist;\n    },\n\n    /**\n     * A move to some panel.\n     * @param {Number} page A number of panel\n     */\n    moveTo: function(page) {\n        page = Math.max(page, 0);\n        page = Math.min(page, this._panels.length - 1);\n\n        var pos = this._checkPagePosition(page),\n            itemCount = this._itemcount,\n            panelCount = this._panels.length,\n            distance = this._distance,\n            itemDist = this._rollunit === 'page' ? distance / itemCount : distance,\n            unitDist = -pos * itemDist;\n\n        if (!this._isCircular) {\n            unitDist = Math.max(unitDist, -this.limit);\n        } else {\n            unitDist = Math.max(unitDist, -(itemDist * (panelCount - itemCount)));\n            this._basis = pos;\n            this._setPanel();\n        }\n        this._container.style[this._range] = unitDist + 'px';\n    }\n};\n\ntui.util.CustomEvents.mixin(Roller);\nmodule.exports = Roller;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"