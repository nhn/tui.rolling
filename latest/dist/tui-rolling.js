/*!
 * TOAST UI Rolling
 * @version 2.2.3
 * @author NHN FE Development Lab <dl_javascript@nhn.com>
 * @license MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("tui-code-snippet"));
	else if(typeof define === 'function' && define.amd)
		define(["tui-code-snippet"], factory);
	else if(typeof exports === 'object')
		exports["Rolling"] = factory(require("tui-code-snippet"));
	else
		root["tui"] = root["tui"] || {}, root["tui"]["Rolling"] = factory(root["tui"]["util"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_tui_code_snippet__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/rolling.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/motion.js":
/*!**************************!*\
  !*** ./src/js/motion.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * @fileoverview Module of motions\n * @author NHN. FE dev Lab.<dl_javascript@nhn.com>\n */\n\n\n\n/**\n * Rolling motion collection\n * @namespace motion\n * @ignore\n */\nvar motion = (function() {\n  var quadEaseIn, circEaseIn, quadEaseOut, circEaseOut, quadEaseInOut, circEaseInOut;\n\n  /**\n   * easeIn\n   * @param {Number} delta - Delta value\n   * @returns {Function}\n   */\n  function makeEaseIn(delta) {\n    return function(progress) {\n      return delta(progress);\n    };\n  }\n\n  /**\n   * easeOut\n   * @param {Number} delta - Delta value\n   * @returns {Function}\n   */\n  function makeEaseOut(delta) {\n    return function(progress) {\n      return 1 - delta(1 - progress);\n    };\n  }\n\n  /**\n   * easeInOut\n   * @param {Number} delta - Delta value\n   * @returns {Function}\n   */\n  function makeEaseInOut(delta) {\n    return function(progress) {\n      var result;\n\n      if (progress < 0.5) {\n        result = delta(2 * progress) / 2;\n      } else {\n        result = (2 - delta(2 * (1 - progress))) / 2;\n      }\n\n      return result;\n    };\n  }\n\n  /**\n   * Linear\n   * @param {Number} progress - Progress value\n   * @returns {Number}\n   * @memberof motion\n   * @method linear\n   * @static\n   */\n  function linear(progress) {\n    return progress;\n  }\n\n  /**\n   * Quad\n   * @param {Number} progress - Progress value\n   * @returns {Number}\n   * @memberof motion\n   * @method quad\n   * @static\n   */\n  function quad(progress) {\n    return Math.pow(progress, 2);\n  }\n\n  /**\n   * Circle\n   * @param {Number} progress - Progress value\n   * @returns {Number}\n   * @memberof motion\n   * @method circ\n   * @static\n   */\n  function circ(progress) {\n    return 1 - Math.sin(Math.acos(progress));\n  }\n\n  /**\n   * qued + easeIn\n   * @memberof motion\n   * @method quadEaseIn\n   * @static\n   */\n  quadEaseIn = makeEaseIn(quad);\n\n  /**\n   * circ + easeIn\n   * @memberof motion\n   * @method circEaseIn\n   * @static\n   */\n  circEaseIn = makeEaseIn(circ);\n\n  /**\n   * quad + easeOut\n   * @memberof motion\n   * @method quadEaseOut\n   * @static\n   */\n  quadEaseOut = makeEaseOut(quad);\n\n  /**\n   * circ + easeOut\n   * @memberof motion\n   * @method circEaseOut\n   * @static\n   */\n  circEaseOut = makeEaseOut(circ);\n\n  /**\n   * quad + easeInOut\n   * @memberof motion\n   * @method quadEaseInOut\n   * @static\n   */\n  quadEaseInOut = makeEaseInOut(quad);\n\n  /**\n   * circ + easeInOut\n   * @memberof motion\n   * @method circEaseInOut\n   * @static\n   */\n  circEaseInOut = makeEaseInOut(circ);\n\n  return {\n    linear: linear,\n    easeIn: quadEaseIn,\n    easeOut: quadEaseOut,\n    easeInOut: quadEaseInOut,\n    quadEaseIn: quadEaseIn,\n    quadEaseOut: quadEaseOut,\n    quadEaseInOut: quadEaseInOut,\n    circEaseIn: circEaseIn,\n    circEaseOut: circEaseOut,\n    circEaseInOut: circEaseInOut\n  };\n})();\n\nmodule.exports = motion;\n\n\n//# sourceURL=webpack://tui.Rolling/./src/js/motion.js?");

/***/ }),

/***/ "./src/js/rolldata.js":
/*!****************************!*\
  !*** ./src/js/rolldata.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * @fileoverview A data for move\n * @author NHN. FE dev Lab.<dl_javascript@nhn.com>\n */\n\n\n\nvar snippet = __webpack_require__(/*! tui-code-snippet */ \"tui-code-snippet\");\n\n/**\n * Node for each data panel\n * @namespace Node\n * @param {Object} data node data or html value\n * @ignore\n * @constructor\n */\nvar Node = function(data) {\n  this.prev = null;\n  this.next = null;\n  this.data = data;\n};\n\n/**\n * Static data method set\n * @namespace staticDataMethods\n * @ignore\n */\nvar staticDataMethods = {\n  /**\n   * Initialize data\n   * @param {Array} datalist A list that is not connected with each other\n   * @private\n   */\n  _initData: function(datalist) {\n    var before = null;\n    var first, nodelist;\n\n    nodelist = snippet.map(\n      datalist,\n      function(data, index) {\n        var node = new Node(data);\n        node.prev = before;\n\n        if (before) {\n          before.next = node;\n        } else {\n          first = node;\n        }\n        if (index === datalist.length - 1) {\n          node.next = first;\n          first.prev = node;\n        }\n\n        before = node;\n\n        return node;\n      },\n      this\n    );\n\n    nodelist.unshift(null);\n\n    this._datalist = nodelist;\n  },\n\n  /**\n   * Get index data\n   * @param {Number} index A index to get\n   * @returns {String}\n   */\n  getData: function(index) {\n    return this._datalist[index || this._current].data;\n  },\n\n  /**\n   * Get list length\n   * @returns {Array}\n   */\n  getDataListLength: function() {\n    return this._datalist.length - 1;\n  },\n\n  /**\n   * Get next data\n   * @param {Number} index A next index\n   * @returns {String}\n   * @private\n   */\n  getPrevData: function(index) {\n    return this._datalist[index || this._current].prev.data;\n  },\n\n  /**\n   * Get prev data\n   * @param {Number} index A prev index\n   * @returns {String}\n   * @private\n   */\n  getNextData: function(index) {\n    return this._datalist[index || this._current].next.data;\n  },\n\n  /**\n   * Change current\n   * @param {String} flow A direction\n   * @returns {Boolean} Current state\n   * @private\n   */\n  changeCurrent: function(flow) {\n    var length = this.getDataListLength();\n\n    if (flow === 'prev') {\n      this._current -= 1;\n      if (this._current < 1) {\n        this._current = this._isCircular ? length : 1;\n\n        return true;\n      }\n    } else {\n      this._current += 1;\n      if (this._current > length) {\n        this._current = this._isCircular ? 1 : length;\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Get current\n   * @returns {Number}\n   */\n  getCurrent: function() {\n    return this._current;\n  }\n};\n\n/**\n * Changable data method set\n * @namespace remoteDataMethods\n * @static\n * @ignore\n */\nvar remoteDataMethods = {\n  /**\n   * Initialize data\n   * @param {String} data A data to draw\n   * @private\n   */\n  _initData: function(data) {\n    this._data = new Node(data);\n  },\n\n  /**\n   * Get current data or some data by index\n   * @param {Number} index A index of data\n   * @returns {String}\n   */\n  getData: function() {\n    return this._data.data;\n  },\n\n  /**\n   * Set data\n   * @param {String} type ['prev|next'] A data index\n   * @param {String} data A data in rolling component\n   */\n  setData: function(type, data) {\n    this._data[type] = new Node(data);\n  },\n\n  /**\n   * Disconnect data\n   * @param {String} type ['prev|next'] Rewrite data\n   */\n  severLink: function(type) {\n    var data = this._data;\n    this._data = this._data[type];\n    data[type] = null;\n  },\n\n  /**\n   * Get previous Data\n   * @returns {String}\n   * @private\n   */\n  getPrevData: function() {\n    return this._data.prev && this._data.prev.data;\n  },\n\n  /**\n   * Get next data\n   * @returns {String}\n   * @private\n   */\n  getNextData: function() {\n    return this._data.next && this._data.next.data;\n  }\n};\n\n/**\n * Data model for rolling\n * @param {Object} options A component options\n * @param {(Array|Object)} data A data of rolling\n * @constructor\n * @ignore\n */\nvar Data = snippet.defineClass(\n  /** @lends Data.prototype */ {\n    init: function(options, data) {\n      /**\n       * Whether changable data\n       * @type {Boolean}\n       */\n      this.isVariable = !!options.isVariable;\n\n      /**\n       * A data list\n       * @type {Array}\n       */\n      this._datalist = null;\n\n      /**\n       * A data\n       * @type {Node}\n       * @private\n       */\n      this._data = null;\n\n      /**\n       * A init number\n       * @type {Number}\n       */\n      this._current = options.initNum || 1;\n\n      /**\n       * Whehter circular\n       * @type {Boolean}\n       * @private\n       */\n      this._isCircular = snippet.isBoolean(options.isCircular) ? options.isCircular : true;\n\n      if (this.isVariable) {\n        this.mixin(remoteDataMethods);\n      } else {\n        this.mixin(staticDataMethods);\n      }\n\n      this._initData(data);\n    },\n\n    /**\n     * Mixin\n     * @param {Object} methods A method set [staticDataMethods|remoteDataMethods]\n     */\n    mixin: function(methods) {\n      snippet.extend(this, methods);\n    }\n  }\n);\n\nmodule.exports = Data;\n\n\n//# sourceURL=webpack://tui.Rolling/./src/js/rolldata.js?");

/***/ }),

/***/ "./src/js/roller.js":
/*!**************************!*\
  !*** ./src/js/roller.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * @fileoverview Roller\n * @author NHN. FE dev Lab.<dl_javascript@nhn.com>\n */\n\n\n\nvar snippet = __webpack_require__(/*! tui-code-snippet */ \"tui-code-snippet\");\n\nvar motion = __webpack_require__(/*! ./motion */ \"./src/js/motion.js\");\n\n/**\n * A roller method set for fixed panel\n * @namespace movePanelSet\n * @static\n * @ignore\n */\nvar movePanelSet = {\n  /**\n   * Set rolling container\n   * @private\n   */\n  // eslint-disable-next-line complexity\n  _setContainer: function() {\n    var options = this._options;\n    var element = this._element;\n    var firstChild = element.firstChild;\n    var wrap, next, tag, className;\n\n    if (options.wrapperTag) {\n      tag = options.wrapperTag && options.wrapperTag.split('.')[0];\n      className = (options.wrapperTag && options.wrapperTag.split('.')[1]) || '';\n      wrap = document.createElement(tag);\n\n      if (className) {\n        wrap.className = className;\n      }\n      this._element.innerHTML = '';\n      this._element.appendChild(wrap);\n    } else {\n      if (snippet.isHTMLTag(firstChild)) {\n        wrap = firstChild;\n      }\n      next = firstChild && firstChild.nextSibling;\n      if (snippet.isHTMLTag(next)) {\n        wrap = next;\n      } else {\n        wrap = document.createElement('ul');\n        this._element.appendChild(wrap);\n      }\n    }\n    this._container = wrap;\n  },\n\n  /**\n   * Make rolling panel\n   * @param {object} initData - Data\n   * @private\n   */\n  _setPanel: function(initData) {\n    var panelSet = this.panel;\n    var info = this._getElementInfo();\n\n    this._container.innerHTML = '';\n\n    snippet.forEach(\n      panelSet,\n      function(value, key) {\n        panelSet[key] = this._makeElement(info.tag, info.className, key);\n      },\n      this\n    );\n\n    panelSet.center.innerHTML = initData;\n    this._container.appendChild(panelSet.center);\n  },\n\n  /**\n   * Get element info\n   * @returns {object} Element info\n   * @private\n   */\n  // eslint-disable-next-line complexity\n  _getElementInfo: function() {\n    var panel = this._container.firstChild;\n    var options = this._options;\n    var tag, className;\n\n    if (snippet.isString(options.panelTag)) {\n      tag = options.panelTag.split('.')[0];\n      className = options.panelTag.split('.')[1] || '';\n    } else {\n      if (!snippet.isHTMLTag(panel)) {\n        panel = panel && panel.nextSibling;\n      }\n      tag = snippet.isHTMLTag(panel) ? panel.tagName : 'li';\n      className = (panel && panel.className) || '';\n    }\n\n    return {\n      tag: tag,\n      className: className\n    };\n  },\n\n  /**\n   * Make HTML Element\n   * @param {String} tag A tag name\n   * @param {String} className A class name\n   * @returns {HTMLElement}\n   * @private\n   */\n  _makeElement: function(tag, className) {\n    var element = document.createElement(tag);\n\n    element.className = className;\n    element.style.position = 'absolute';\n    element.style.width = '100%';\n    element.style.height = '100%';\n    element.style.left = '0px';\n    element.style.top = '0px';\n\n    return element;\n  },\n\n  /**\n   * Set panel data\n   * @param {String} data A data for replace panel\n   * @private\n   */\n  _updatePanel: function(data) {\n    this.panel[this._flow || 'center'].innerHTML = data;\n  },\n\n  /**\n   * Append move panel\n   * @private\n   */\n  _appendMoveData: function() {\n    var flow = this._flow,\n      movePanel = this.panel[flow],\n      style = movePanel.style,\n      dest = (flow === 'prev' ? -this._distance : this._distance) + 'px';\n\n    style[this._range] = dest;\n\n    this.movePanel = movePanel;\n    this._container.appendChild(movePanel);\n  },\n\n  /**\n   * Get each panels' move distances\n   * @returns {*}\n   * @private\n   */\n  _getMoveSet: function() {\n    var flow = this._flow;\n    var result;\n\n    if (flow === 'prev') {\n      result = [0, this._distance];\n    } else {\n      result = [-this._distance, 0];\n    }\n\n    return result;\n  },\n\n  /**\n   * Get start points\n   * @returns {Array}\n   * @private\n   */\n  _getStartSet: function() {\n    var panel = this.panel;\n    var flow = this._flow;\n    var range = this._range;\n    var isPrev = flow === 'prev';\n    var first = isPrev ? panel.prev : panel.center;\n    var second = isPrev ? panel.center : panel.next;\n\n    return [parseInt(first.style[range], 10), parseInt(second.style[range], 10)];\n  },\n\n  /**\n   * Get move target\n   * @param {String} flow A flow to move\n   * @private\n   */\n  _setTarget: function(flow) {\n    this._targets = [this.panel.center];\n\n    if (flow === 'prev') {\n      this._targets.unshift(this.panel[flow]);\n    } else {\n      this._targets.push(this.panel[flow]);\n    }\n  },\n\n  /**\n   * A panel move\n   * @param {Object} data - A data to update panel\n   * @param {Number} duration - Idle time\n   * @param {String} flow - A direction to next rolling\n   */\n  move: function(data, duration, flow) {\n    var result;\n\n    flow = flow || this._flow;\n\n    if (this.status === 'idle') {\n      this.status = 'run';\n    } else {\n      this._queueing(data, duration, flow);\n\n      return;\n    }\n\n    /**\n     * @event Rolling#beforeMove\n     * @type {object} ev - Custom event object\n     * @property {String} data - Inner HTML\n     * @example\n     * instance.on('beforeMove', function(ev) {\n     *     console.log(ev.data)\n     * });\n     */\n    result = this._rolling.invoke('beforeMove', {\n      data: data\n    });\n\n    if (!result) {\n      this.status = 'idle';\n\n      return;\n    }\n\n    // Set next panel\n    this._updatePanel(data);\n    this._appendMoveData();\n    this._setTarget(flow);\n\n    if (!this._motion) {\n      this._moveWithoutMotion();\n    } else {\n      this._moveWithMotion(duration);\n    }\n  },\n\n  /**\n   * Set position\n   * @private\n   */\n  _moveWithoutMotion: function() {\n    var pos = this._getMoveSet();\n    var range = this._range;\n\n    snippet.forEach(this._targets, function(element, index) {\n      element.style[range] = pos[index] + 'px';\n    });\n\n    this.complete();\n  },\n\n  /**\n   * Run animation\n   * @param {Number} duration - Idle time\n   * @private\n   */\n  _moveWithMotion: function(duration) {\n    var flow = this._flow;\n    var start = this._getStartSet(flow);\n    var distance = this._distance;\n    var range = this._range;\n\n    duration = duration || this._duration;\n\n    this._animate({\n      delay: 10,\n      duration: duration || 1000,\n      delta: this._motion,\n      step: snippet.bind(function(delta) {\n        snippet.forEach(this._targets, function(element, index) {\n          var dest = flow === 'prev' ? distance * delta : -(distance * delta);\n          element.style[range] = start[index] + dest + 'px';\n        });\n      }, this),\n      complete: snippet.bind(this.complete, this)\n    });\n  },\n\n  /**\n   * Complate callback\n   */\n  complete: function() {\n    var panel = this.panel;\n    var flow = this._flow;\n    var tempPanel, first;\n\n    tempPanel = panel.center;\n    panel.center = panel[flow];\n    panel[flow] = tempPanel;\n\n    this._targets = null;\n    this._container.removeChild(tempPanel);\n    this.status = 'idle';\n\n    if (snippet.isNotEmpty(this._queue)) {\n      first = this._queue.shift();\n      this.move(first.data, first.duration, first.flow);\n    } else {\n      /**\n       * @event Rolling#afterMove\n       * @example\n       * instance.on('afterMove', function() {\n       *     // code\n       * });\n       */\n      this._rolling.fire('afterMove');\n    }\n  }\n};\n\n/**\n * Container move methods\n * @namespace moveContainerSet\n * @static\n * @ignore\n */\nvar moveContainerSet = {\n  /**\n   * Set container\n   * @private\n   */\n  _setContainer: function() {\n    var element = this._element,\n      firstChild = element.firstChild,\n      wrap;\n    if (this._isDrawn) {\n      wrap = snippet.isHTMLTag(firstChild) ? firstChild : firstChild.nextSibling;\n      this._container = wrap;\n      this._container.style[this._range] = 0;\n    }\n    this._setItemCount();\n  },\n\n  /**\n   * Move area check\n   * @param {String} flow A direction to move\n   * @returns {Boolean}\n   * @private\n   */\n  _isLimitPoint: function(flow) {\n    var moved = this._getCurrentPosition();\n    var result;\n\n    if (flow === 'next') {\n      result = !(this.limit > -moved);\n    } else {\n      result = !(moved < 0);\n    }\n\n    return result;\n  },\n\n  /**\n   * Get current position\n   * @returns {Number} Current position;\n   * @private\n   */\n  _getCurrentPosition: function() {\n    return parseInt(this._container.style[this._range], 10);\n  },\n\n  /**\n   * Move panels\n   * @param {Number} duration - Idle time\n   * @param {String} flow - A direction to next rolling\n   */\n  /* eslint-disable complexity */\n  move: function(duration, flow) {\n    var result;\n\n    flow = flow || this._flow;\n\n    if (this.status === 'idle') {\n      this.status = 'run';\n    } else {\n      this._queueing(duration, flow);\n\n      return;\n    }\n\n    result = this._rolling.invoke('beforeMove');\n\n    if (!result) {\n      this.status = 'idle';\n\n      return;\n    }\n\n    if (!this._isCircular && this._isLimitPoint(flow)) {\n      this.status = 'idle';\n\n      return;\n    }\n\n    if (this._isCircular) {\n      this._rotatePanel(flow);\n    }\n\n    if (!this._motion) {\n      this._moveWithoutMotion();\n    } else {\n      this._moveWithMotion(duration);\n    }\n  },\n  /* eslint-enable complexity */\n\n  /**\n   * Fix panels\n   */\n  complete: function() {\n    if (this._isCircular) {\n      this._setPanel();\n    }\n    this.status = 'idle';\n  },\n\n  /**\n   * Get move distance\n   * @param {String} flow A direction\n   * @returns {number}\n   * @private\n   */\n  _getMoveDistance: function(flow) {\n    var moved = this._getCurrentPosition();\n    var castDist = this._distance * this._unitCount;\n    var result;\n\n    if (flow === 'prev') {\n      if (this._isCircular) {\n        return this._distance;\n      }\n      result = moved + castDist > 0 ? -moved : castDist;\n    } else {\n      if (this._isCircular) {\n        return -this._distance;\n      }\n      result = castDist > this.limit + moved ? -this.limit - moved : -castDist;\n    }\n\n    return result;\n  },\n\n  /**\n   * Set postion\n   * @private\n   */\n  _moveWithoutMotion: function() {\n    var flow = this._flow;\n    var pos = this._getMoveDistance(flow);\n    var range = this._range;\n    var start = parseInt(this._container.style[range], 10);\n\n    this._container.style[range] = start + pos + 'px';\n    this.complete();\n  },\n\n  /**\n   * Run animation\n   * @param {Number} duration - Idle time\n   * @private\n   */\n  _moveWithMotion: function(duration) {\n    var flow = this._flow;\n    var container = this._container;\n    var range = this._range;\n    var start = parseInt(container.style[range], 10);\n    var distance = this._getMoveDistance(flow);\n\n    duration = duration || this._duration;\n\n    this._animate({\n      delay: 10,\n      duration: duration || 1000,\n      delta: this._motion,\n      step: snippet.bind(function(delta) {\n        var dest = distance * delta;\n        container.style[range] = start + dest + 'px';\n      }, this),\n      complete: snippet.bind(this.complete, this)\n    });\n  },\n\n  /**\n   * Rotate panel\n   * @param {String} flow A flow to rotate panel\n   * @private\n   */\n  _rotatePanel: function(flow) {\n    var range = this._range;\n    var isPrev = flow === 'prev';\n    var basis = this._basis;\n    var standard, moveset, movesetLength, containerMoveDist;\n\n    flow = flow || this._flow;\n\n    this._setPartOfPanels(flow);\n\n    moveset = this._movePanelSet;\n    movesetLength = moveset.length;\n    containerMoveDist = this._getMoveDistance(flow);\n\n    if (this._isInclude(this._panels[this._basis], moveset)) {\n      this._basis = isPrev ? basis - movesetLength : basis + movesetLength;\n\n      return;\n    }\n\n    if (isPrev) {\n      standard = this._panels[0];\n      snippet.forEach(\n        moveset,\n        function(element) {\n          this._container.insertBefore(element, standard);\n        },\n        this\n      );\n    } else {\n      snippet.forEach(\n        moveset,\n        function(element) {\n          this._container.appendChild(element);\n        },\n        this\n      );\n    }\n    this._container.style[range] =\n      parseInt(this._container.style[range], 10) - containerMoveDist + 'px';\n  },\n\n  /**\n   * Check current panel is included rotate panels\n   * @param {HTMLElement} item A target element\n   * @param {Array} colleciton A array to compare\n   * @returns {boolean}\n   * @private\n   */\n  _isInclude: function(item, colleciton) {\n    var i = 0;\n    var length = colleciton.length;\n    var result = false;\n\n    for (; i < length; i += 1) {\n      if (colleciton[i] === item) {\n        result = true;\n        break;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Find rotate panel by direction\n   * @param {String} flow A direction\n   * @private\n   */\n  _setPartOfPanels: function(flow) {\n    var itemcount = this._itemcount;\n    var isPrev = flow === 'prev';\n    var count = this._rollunit !== 'page' ? 1 : itemcount;\n    var dist = isPrev ? -count : count;\n    var point = isPrev ? [dist] : [0, dist];\n\n    this._movePanelSet = this._panels.slice.apply(this._panels, point);\n  },\n\n  /**\n   * Get display item count\n   * @private\n   */\n  _setItemCount: function() {\n    var element = this._element;\n    var elementStyle = element.style;\n    var elementWidth = parseInt(elementStyle.width || element.clientWidth, 10);\n    var elementHeight = parseInt(elementStyle.height || element.clientHeight, 10);\n    var item = this._element.getElementsByTagName('li')[0];\n    var itemStyle = item.style;\n    var itemWidth = parseInt(itemStyle.width || item.clientWidth, 10);\n    var itemHeight = parseInt(itemStyle.height || item.clientHeight, 10);\n\n    if (this._range === 'left') {\n      this._itemcount = Math.round(elementWidth / itemWidth);\n    } else {\n      this._itemcount = Math.round(elementHeight / itemHeight);\n    }\n  },\n\n  /**\n   * Initalize panels\n   * @private\n   */\n  _initPanel: function() {\n    var container = this._container;\n    var panels = container.childNodes;\n\n    panels = snippet.toArray(panels);\n\n    this._panels = snippet.filter(panels, function(element) {\n      return snippet.isHTMLTag(element);\n    });\n    snippet.forEach(this._panels, function(panel, index) {\n      panel.className += ' __index' + index + '__';\n    });\n  },\n\n  /**\n   * Set panel list\n   * @private\n   */\n  _setPanel: function() {\n    var container = this._container;\n    var panels = container.childNodes;\n\n    panels = snippet.toArray(panels);\n\n    this._panels = snippet.filter(panels, function(element) {\n      return snippet.isHTMLTag(element);\n    });\n    this._basis = this._basis || 0;\n    this._setBoundary();\n  },\n\n  /**\n   * Set fixed area incircular rolling\n   * @private\n   */\n  _setBoundary: function() {\n    var panels = this._panels;\n    var distance = this._distance;\n    var range = this._range;\n    var rangeDistance = parseInt(this._element.style[range === 'left' ? 'width' : 'height'], 10);\n    var wrapArea =\n      this._rollunit === 'page' ? distance / this._itemcount : distance * panels.length;\n    var limitDist = wrapArea - rangeDistance;\n\n    this.limit = limitDist;\n  },\n\n  /**\n   * Get current index on selected page\n   * @param {Number} page A move panel number\n   * @returns {number}\n   * @private\n   */\n  _checkPagePosition: function(page) {\n    var dist = null;\n    var panels = this._panels;\n\n    snippet.forEach(panels, function(panel, index) {\n      if (panel.className.indexOf('__index' + page) !== -1) {\n        if (!snippet.isExisty(dist)) {\n          dist = index;\n        }\n      }\n    });\n\n    return dist;\n  },\n\n  /**\n   * A move to some panel.\n   * @param {Number} page A number of panel\n   */\n  moveTo: function(page) {\n    var itemCount = this._itemcount;\n    var panelCount = this._panels.length;\n    var distance = this._distance;\n    var pos, itemDist, unitDist;\n\n    page = Math.max(page, 0);\n    page = Math.min(page, this._panels.length - 1);\n\n    pos = this._checkPagePosition(page);\n    itemDist = this._rollunit === 'page' ? distance / itemCount : distance;\n    unitDist = -pos * itemDist;\n\n    if (!this._isCircular) {\n      unitDist = Math.max(unitDist, -this.limit);\n    } else {\n      unitDist = Math.max(unitDist, -(itemDist * (panelCount - itemCount)));\n      this._basis = pos;\n      this._setPanel();\n    }\n\n    this._container.style[this._range] = unitDist + 'px';\n  }\n};\n\n/**\n * Roller that move rolling panel\n * @param {Object} options - The options of rolling component\n * @param {Object} initData - Data to set panels\n * @param {Rolling} Rolling - Rolling object to bind custom event\n * @constructor\n * @ignore\n */\nvar Roller = snippet.defineClass(\n  /** @lends Roller.prototype */ {\n    /* eslint-disable complexity */\n    init: function(options, initData, rolling) {\n      /**\n       * A options\n       * @type {Object}\n       * @private\n       */\n      this._options = options;\n\n      /**\n       * A root element\n       * @type {(HTMLElement|String)}\n       * @private\n       */\n      this._element = snippet.isString(options.element)\n        ? document.getElementById(options.element)\n        : options.element;\n\n      /**\n       * A direction of rolling (vertical|horizontal)\n       * @type {String}\n       * @private\n       */\n      this._direction = options.direction || 'horizontal';\n\n      /**\n       * A style attribute to move('left | top')\n       * @type {string}\n       * @private\n       */\n      this._range = this._direction === 'horizontal' ? 'left' : 'top';\n\n      /**\n       * A function that is used to move\n       * @type {Function}\n       */\n      this._motion = motion[options.motion || 'noeffect'];\n\n      /**\n       * A rolling unit\n       * @type {Number}\n       * @private\n       */\n      this._rollunit = options.unit || 'page';\n\n      /**\n       * Whether html is drawn or not\n       * @type {boolean}\n       * @private\n       */\n      this._isDrawn = !!options.isDrawn;\n\n      /**\n       * A item per page\n       * @type {boolean}\n       * @private\n       */\n      this._itemcount = options.itemcount;\n\n      /**\n       * A direction to next rolling\n       * @type {string}\n       * @private\n       */\n      this._flow = options.flow || 'next';\n\n      /**\n       * A animation duration\n       * @type {*|number}\n       * @private\n       */\n      this._duration = options.duration || 1000;\n\n      /**\n       * Whether circular or not\n       * @type {Boolean}\n       * @private\n       */\n      this._isCircular = snippet.isExisty(options.isCircular) ? options.isCircular : true;\n\n      /**\n       * A roller state\n       * @type {String}\n       */\n      this.status = 'idle';\n\n      /**\n       * A container that will be moved\n       * @type {HTMLElement}\n       * @private\n       */\n      this._container = null;\n\n      /**\n       * Changable data panel\n       * @type {Object}\n       */\n      this.panel = {\n        prev: null,\n        center: null,\n        next: null\n      };\n\n      /**\n       * Fixed roller panels, that have node list by array\n       * @type {Array}\n       */\n      this._panels = [];\n\n      /**\n       * Base element\n       * @type {HTMLElement}\n       */\n      this._basis = null;\n\n      /**\n       * Root element width, if move unit is page this is move width\n       * @type {number}\n       * @private\n       */\n      this._distance = 0;\n\n      /**\n       * Moved panel target\n       * @type {Array}\n       * @private\n       */\n      this._targets = [];\n\n      /**\n       * Queue for order that is requested during moving\n       * @type {Array}\n       * @private\n       */\n      this._queue = [];\n\n      /**\n       * A move unit count\n       * @type {number}\n       * @private\n       */\n      this._unitCount = options.rollunit === 'page' ? 1 : options.unitCount || 1;\n\n      /**\n       * Rolling object\n       * @type {Rolling}\n       * @private\n       */\n      this._rolling = rolling;\n\n      if (!this._isDrawn) {\n        this.mixin(movePanelSet);\n      } else {\n        this.mixin(moveContainerSet);\n      }\n\n      this._setContainer();\n      this._masking();\n      this._setUnitDistance();\n\n      if (this._isDrawn) {\n        this._initPanel();\n      }\n      this._setPanel(initData);\n    },\n    /* eslint-enable complexity */\n\n    /**\n     * Mixin\n     * @param {Object} methods A method set [staticDataMethods|remoteDataMethods]\n     */\n    mixin: function(methods) {\n      snippet.extend(this, methods);\n    },\n\n    /**\n     * Masking\n     * @method\n     * @private\n     */\n    _masking: function() {\n      var element = this._element;\n      var elementStyle = element.style;\n\n      elementStyle.position = 'relative';\n      elementStyle.overflow = 'hidden';\n      elementStyle.width = elementStyle.width || element.clientWidth + 'px';\n      elementStyle.height = elementStyle.height || element.clientHeight + 'px';\n    },\n\n    /**\n     * Get unit move distance\n     * @private\n     */\n    _setUnitDistance: function() {\n      var elementStyle = this._element.style;\n      var dist;\n\n      if (this._direction === 'horizontal') {\n        dist = elementStyle.width.replace('px', '');\n      } else {\n        dist = elementStyle.height.replace('px', '');\n      }\n\n      if (this._rollunit !== 'page' && this._isDrawn) {\n        dist = Math.ceil(dist / this._itemcount);\n      }\n      this._distance = parseInt(dist, 10);\n    },\n\n    /**\n     * Queue move order\n     * @param {String} data A page data\n     * @param {Number} duration A duartion\n     * @param {String} flow A direction to move\n     * @private\n     */\n    _queueing: function(data, duration, flow) {\n      this._queue.push({\n        data: data,\n        duration: duration,\n        flow: flow\n      });\n    },\n\n    /**\n     * A default direction\n     * @param {String} flow A flow that will be defualt value\n     */\n    setFlow: function(flow) {\n      this._flow = flow || this._flow || 'next';\n    },\n\n    /**\n     * change animation effect\n     * @param {String} type A name of effect\n     */\n    changeMotion: function(type) {\n      this._motion = motion[type];\n    },\n\n    /**\n     * Animate\n     * @param {Object} options A options for animating\n     */\n    _animate: function(options) {\n      var start = new Date(),\n        id = window.setInterval(function() {\n          var timePassed = new Date() - start,\n            progress = timePassed / options.duration,\n            delta;\n          if (progress > 1) {\n            progress = 1;\n          }\n          delta = options.delta(progress);\n\n          options.step(delta);\n\n          if (progress === 1) {\n            window.clearInterval(id);\n            options.complete();\n          }\n        }, options.delay || 10);\n    }\n  }\n);\n\nmodule.exports = Roller;\n\n\n//# sourceURL=webpack://tui.Rolling/./src/js/roller.js?");

/***/ }),

/***/ "./src/js/rolling.js":
/*!***************************!*\
  !*** ./src/js/rolling.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * @fileoverview Rolling component core.\n * @author NHN. FE dev Lab.<dl_javascript@nhn.com>\n */\n\n\n\nvar snippet = __webpack_require__(/*! tui-code-snippet */ \"tui-code-snippet\");\n\nvar Roller = __webpack_require__(/*! ./roller */ \"./src/js/roller.js\");\nvar Data = __webpack_require__(/*! ./rolldata */ \"./src/js/rolldata.js\");\n\n/**\n * Rolling core object\n * @class Rolling\n * @param {Object} options The options\n *      @param {HTMLElement|String} options.element A root element or id that will become root element's\n *      @param {Boolean} [options.isVariable=true|false] Whether the data is changable or not [default value is false]\n *      @param {Boolean} [options.isCircular=true|false] Whether circular or not [default value is true but isVariable true case]\n *      @param {Boolean} [options.isAuto=true|false] Whether auto rolling or not [default value is false]\n *      @param {Boolean} [options.usageStatistics=true|false] send hostname to google analytics [default value is true]\n *      @param {Number} [options.delayTime=1000|...] Distance time of auto rolling. [defulat 3 second]\n *      @param {Number} [options.direction='horizontal|vertical'] The flow direction panel [default value is horizontal]\n *      @param {Number} [options.duration='1000|...] A move duration\n *      @param {Number} [options.initNum='0|...] Initalize selected rolling panel number\n *      @param {String} [options.motion='linear|[quad]easeIn|[quad]easeOut|[quad]easeInOut|circEaseIn|circEaseOut|circEaseInOut] A effect name [default value is noeffect]\n *      @param {String} [options.unit='item|page'] A unit of rolling\n *      @param {String} [options.wrapperTag='ul.className|div.className'] A tag name for panel warpper, connect tag name with class name by dots. [defualt value is ul]\n *      @param {String} [options.panelTag='li.className'] A tag name for panel, connect tag name with class by dots [default value is li]\n * @param {Array|String} data A data of rolling panels\n * @example\n * var Rolling = tui.Rolling; // or require('tui-rolling')\n * var instance = new tui.Rolling({\n *      element: document.getElementById('rolling'),\n *      initNum: 0,\n *      direction: 'horizontal',\n *      isVariable: true,\n *      unit: 'page',\n *      isAuto: false,\n *      motion: 'easeInOut',\n *      duration: 2000\n * }, ['<div>data1</div>','<div>data2</div>', '<div>data3</div>']);\n */\nvar Rolling = snippet.defineClass(\n  /** @lends Rolling.prototype */ {\n    // eslint-disable-next-line complexity\n    init: function(options, data) {\n      var isAuto = !!options.isAuto;\n\n      /**\n       * Whether ga tracking or not\n       * @type {Boolean}\n       * @private\n       */\n      var usageStatistics = snippet.isExisty(options.usageStatistics)\n        ? options.usageStatistics\n        : true;\n\n      /**\n       * options object\n       * @type {Object}\n       * @private\n       */\n      this._options = options;\n\n      /**\n       * The flow of next move\n       * @type {String|string}\n       * @private\n       */\n      this._flow = options.flow || 'next';\n\n      /**\n       * Whether html is drawn or not\n       * @type {boolean}\n       * @private\n       */\n      this._isDrawn = !!options.isDrawn;\n\n      /**\n       * Auto rolling timer\n       * @type {null}\n       * @private\n       */\n      this._timer = null;\n\n      /**\n       * Auto rolling delay time\n       * @type {Number}\n       * @private\n       */\n      this._delayTime = options.delayTime || 3000;\n\n      /**\n       * A model for rolling data\n       * @type {Data}\n       * @private\n       */\n      this._model = !options.isDrawn ? new Data(options, data) : null;\n\n      /**\n       * A rolling action object\n       * @type {Roller}\n       * @private\n       */\n      this._roller = new Roller(options, this._model && this._model.getData(), this);\n\n      if (options.initNum) {\n        this.moveTo(options.initNum);\n      }\n\n      if (isAuto) {\n        this.auto();\n      }\n\n      if (usageStatistics) {\n        snippet.sendHostname('rolling', 'UA-129987462-1');\n      }\n    },\n\n    /* eslint-disable complexity */\n    /**\n     * Roll the rolling component. If there is no data, the component have to have with fixed data\n     * @param {String} data A rolling data\n     * @param {String} [flow] A direction rolling\n     * @example\n     * rolling.roll('<div>data</div>', 'horizontal');\n     */\n    roll: function(data, flow) {\n      var overBoundary;\n\n      flow = flow || this._flow;\n\n      // If rolling status is not idle, return\n      if (this._roller.status !== 'idle') {\n        return;\n      }\n\n      if (this._options.isVariable) {\n        if (!data) {\n          throw new Error('roll must run with data');\n        }\n\n        this.setFlow(flow);\n        this._roller.move(data);\n      } else {\n        this.setFlow(flow);\n\n        if (this._model) {\n          overBoundary = this._model.changeCurrent(flow);\n          data = this._model.getData();\n        }\n        if (!overBoundary) {\n          this._roller.move(data);\n        }\n      }\n    },\n    /* eslint-enable complexity */\n\n    /**\n     * Set direction\n     * @param {String} flow A direction of rolling\n     * @example\n     * rolling.setFlow('horizontal');\n     */\n    setFlow: function(flow) {\n      this._flow = flow;\n      this._roller.setFlow(flow);\n    },\n\n    /* eslint-disable complexity */\n    /**\n     * Move to target page\n     * @param {Number} page A target page\n     * @example\n     * rolling.moveTo(3);\n     */\n    moveTo: function(page) {\n      var len, max, min, current;\n      var duration, absInterval, isPrev, flow, i;\n\n      if (this._isDrawn) {\n        this._roller.moveTo(page);\n\n        return;\n      }\n\n      len = this._model.getDataListLength();\n      max = Math.min(len, page);\n      min = Math.max(1, page);\n      current = this._model.getCurrent();\n\n      if (isNaN(Number(page))) {\n        throw new Error('#PageError moveTo method have to run with page');\n      }\n\n      if (this._options.isVariable) {\n        throw new Error(\"#DataError : Variable Rolling can't use moveTo\");\n      }\n\n      isPrev = this.isNegative(page - current);\n      page = isPrev ? min : max;\n      flow = isPrev ? 'prev' : 'next';\n      absInterval = Math.abs(page - current);\n      duration = this._options.duration / absInterval;\n\n      this.setFlow(flow);\n\n      for (i = 0; i < absInterval; i += 1) {\n        this._model.changeCurrent(flow);\n        this._roller.move(this._model.getData(), duration);\n      }\n    },\n    /* eslint-enable complexity */\n\n    /**\n     * Check the number is negative or not\n     * @param {Number} number - A number to figure out\n     * @returns {Boolean}\n     * @private\n     */\n    isNegative: function(number) {\n      return !isNaN(number) && number < 0;\n    },\n\n    /**\n     * Stop auto rolling\n     */\n    stop: function() {\n      window.clearInterval(this._timer);\n    },\n\n    /**\n     * Start auto rolling\n     * @example\n     * rolling.auto();\n     */\n    auto: function() {\n      this.stop();\n      this._timer = window.setInterval(\n        snippet.bind(function() {\n          this._model.changeCurrent(this._flow);\n          this._roller.move(this._model.getData());\n        }, this),\n        this._delayTime\n      );\n    }\n  }\n);\n\nsnippet.CustomEvents.mixin(Rolling);\n\nmodule.exports = Rolling;\n\n\n//# sourceURL=webpack://tui.Rolling/./src/js/rolling.js?");

/***/ }),

/***/ "tui-code-snippet":
/*!******************************************************************************************************************************!*\
  !*** external {"commonjs":"tui-code-snippet","commonjs2":"tui-code-snippet","amd":"tui-code-snippet","root":["tui","util"]} ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_tui_code_snippet__;\n\n//# sourceURL=webpack://tui.Rolling/external_%7B%22commonjs%22:%22tui-code-snippet%22,%22commonjs2%22:%22tui-code-snippet%22,%22amd%22:%22tui-code-snippet%22,%22root%22:%5B%22tui%22,%22util%22%5D%7D?");

/***/ })

/******/ });
});